{
  "_args": [
    [
      {
        "raw": "coveralls",
        "scope": null,
        "escapedName": "coveralls",
        "name": "coveralls",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Andela Resources\\web_app\\Ride-My-Way"
    ]
  ],
  "_from": "coveralls@latest",
  "_id": "coveralls@3.0.1",
  "_inCache": true,
  "_location": "/coveralls",
  "_nodeVersion": "9.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/coveralls_3.0.1_1525209063760_0.5256399219971892"
  },
  "_npmUser": {
    "name": "nickmerwin",
    "email": "n@mer.fm"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "coveralls",
    "scope": null,
    "escapedName": "coveralls",
    "name": "coveralls",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/coveralls/-/coveralls-3.0.1.tgz",
  "_shasum": "12e15914eaa29204e56869a5ece7b9e1492d2ae2",
  "_shrinkwrap": null,
  "_spec": "coveralls",
  "_where": "D:\\Andela Resources\\web_app\\Ride-My-Way",
  "author": {
    "name": "Gregg Caines"
  },
  "bin": {
    "coveralls": "./bin/coveralls.js"
  },
  "bugs": {
    "url": "https://github.com/nickmerwin/node-coveralls/issues"
  },
  "contributors": [
    {
      "name": "Gregg Caines",
      "email": "gregg@caines.ca",
      "url": "http://caines.ca"
    },
    {
      "name": "Joshua Ma",
      "email": "github@joshma.com",
      "url": "http://joshma.com"
    },
    {
      "name": "Alan Gutierrez",
      "email": "alan@prettyrobots.com",
      "url": "http://www.prettyrobots.com/"
    },
    {
      "name": "Kir Belevich",
      "url": "https://github.com/svg"
    },
    {
      "name": "elliotcable",
      "email": "github@elliottcable.name",
      "url": "http://elliottcable.name/"
    },
    {
      "name": "Slotos",
      "email": "slotos@gmail.com",
      "url": "http://slotos.net"
    },
    {
      "name": "mattjmorrison",
      "email": "mattjmorrison@mattjmorrison.com",
      "url": "http://mattjmorrison.com"
    },
    {
      "name": "Arpad Borsos",
      "email": "arpad.borsos@googlemail.com",
      "url": "http://swatinem.de/"
    },
    {
      "name": "Adam Moss",
      "url": "https://github.com/adam-moss"
    }
  ],
  "dependencies": {
    "js-yaml": "^3.6.1",
    "lcov-parse": "^0.0.10",
    "log-driver": "^1.2.5",
    "minimist": "^1.2.0",
    "request": "^2.79.0"
  },
  "description": "takes json-cov output into stdin and POSTs to coveralls.io",
  "devDependencies": {
    "istanbul": "^0.4.5",
    "jshint": "2.9.3",
    "mocha": "^3.2.0",
    "mocha-lcov-reporter": "^1.2.0",
    "should": "^9.0.2",
    "sinon-restore": "^1.0.1",
    "snyk": "^1.23.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-FAzXwiDOYLGDWH+zgoIA+8GbWv50hlx+kpEJyvzLKOdnIBv9uWoVl4DhqGgyUHpiRjAlF8KYZSipWXYtllWH6Q==",
    "shasum": "12e15914eaa29204e56869a5ece7b9e1492d2ae2",
    "tarball": "https://registry.npmjs.org/coveralls/-/coveralls-3.0.1.tgz",
    "fileCount": 26,
    "unpackedSize": 77928,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6NfpCRA9TVsSAnZWagAAZZcP/RglvL3r6P3hfwu/L+9g\nXn/bg+mr377oyZo7j2wGvu3g/jlmcx39aMtWUjMb4v8xTHpm5S37b8Zt8OMw\nyeeSAKncXQ/u6yGldD0/xbd/evgEcj4gZXZ8OKJww3Rr+yJkdHhynsq+eyPb\nhdZPW7I879DHqg3cFPqH44oa1zdlkqXwmpOeUgSk5IX1DZUKxVBmgAX8AJ0e\n3DA59ScuQrPJT6mzAy//fWqHqIqIZxCyNn7/8rzWDvMUSbbLoMzFrX3Pn385\nCNVMfzN12ZfOKVXeLSk96gHxjhxVrpG2eY2fQaZcE1MKmUZNdoAopNziKQQf\nthOeDDiSbqQ90yRylkmYGrn4vIFTGsQpUObmzN6gGZQJxfCibVmz3WiTEX81\n40JGJ+J192K4eO0E6usKNTA8FzB+e/5Zg5UM71XkU+fze/syqi4PAfR7INmm\npmEBWVmgtNeF5QT+Js4shGp2I4K194VkVCOGiIJH1eof35/wPCypLUviKsHN\nS9dq0PQUYQNYDwTnN6u48twMtwH6IiCp4Ob9qQO0sLrt5u4Z6bhDwOIZjh7O\nLQp7JkrCjg639FqPYlX0yg/p55Jx+g1FFVsIYsEiuk2kivO9hVcpzWmFWTM5\n2/aqi9xFnd6WH3529M6gyBx/aQBVB8Oatdm2s73pQvoMPFtK0ClJhBC7YvqZ\nGI4p\r\n=oQFT\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "e7ae2bfcb468d47369d885b0cde668b79f6d92b5",
  "homepage": "https://github.com/nickmerwin/node-coveralls#readme",
  "keywords": [
    "coverage",
    "coveralls"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "Nick Merwin",
      "email": "nick@coveralls.io",
      "url": "https://coveralls.io"
    }
  ],
  "name": "coveralls",
  "optionalDependencies": {},
  "readme": "# node-coveralls\n\n[![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url]\n[![Known Vulnerabilities](https://snyk.io/test/github/nickmerwin/node-coveralls/badge.svg)](https://snyk.io/test/github/nickmerwin/node-coveralls)\n\n[Coveralls.io](https://coveralls.io/) support for node.js.  Get the great coverage reporting of coveralls.io and add a cool coverage button ( like the one above ) to your README.\n\nSupported CI services: [travis-ci](https://travis-ci.org/), [codeship](https://www.codeship.io/), [circleci](https://circleci.com/), [jenkins](http://jenkins-ci.org/), [Gitlab CI](http://gitlab.com/), [AppVeyor](http://appveyor.com/), [Buildkite](https://buildkite.com/)\n\n## Installation:\nAdd the latest version of `coveralls` to your package.json:\n```\nnpm install coveralls --save-dev\n```\n\nIf you're using mocha, add `mocha-lcov-reporter` to your package.json:\n```\nnpm install mocha-lcov-reporter --save-dev\n```\n\n## Usage:\n\nThis script ( `bin/coveralls.js` ) can take standard input from any tool that emits the lcov data format (including [mocha](http://mochajs.org/)'s [LCov reporter](https://npmjs.org/package/mocha-lcov-reporter)) and send it to coveralls.io to report your code coverage there.\n\nOnce your app is instrumented for coverage, and building, you need to pipe the lcov output to `./node_modules/coveralls/bin/coveralls.js`.\n\nThis library currently supports [travis-ci](https://travis-ci.org/) with no extra effort beyond piping the lcov output to coveralls. However, if you're using a different build system, there are a few environment variables that are necessary:\n* COVERALLS_SERVICE_NAME  (the name of your build system)\n* COVERALLS_REPO_TOKEN (the secret repo token from coveralls.io)\n\nThere are optional environment variables for other build systems as well:\n* COVERALLS_SERVICE_JOB_ID  (an id that uniquely identifies the build job)\n* COVERALLS_RUN_AT  (a date string for the time that the job ran.  RFC 3339 dates work.  This defaults to your\nbuild system's date/time if you don't set it.)\n* COVERALLS_PARALLEL (more info here: https://coveralls.zendesk.com/hc/en-us/articles/203484329)\n### [Jest](https://facebook.github.io/jest/)\n- Install [jest](https://facebook.github.io/jest/docs/en/getting-started.html)\n- Use the following to run tests and push files to coveralls: \n```sh\njest --coverage --coverageReporters=text-lcov | coveralls\n```\nCheck out an example [here](https://github.com/Ethan-Arrowood/harperdb-connect/blob/master/.travis.yml) which makes use of Travis-CI build stages\n\n### [Mocha](http://mochajs.org/) + [Blanket.js](https://github.com/alex-seville/blanket)\n- Install [blanket.js](http://blanketjs.org/)\n- Configure blanket according to [docs](https://github.com/alex-seville/blanket/blob/master/docs/getting_started_node.md).\n- Run your tests with a command like this:\n\n```sh\nNODE_ENV=test YOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha \\\n  --require blanket \\\n  --reporter mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js\n```\n### [Mocha](http://mochajs.org/) + [JSCoverage](https://github.com/fishbar/jscoverage)\n\nInstrumenting your app for coverage is probably harder than it needs to be (read [here](http://www.seejohncode.com/2012/03/13/setting-up-mocha-jscoverage/)), but that's also a necessary step.\n\nIn mocha, if you've got your code instrumented for coverage, the command for a travis build would look something like this:\n```sh\nYOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha test -R mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js\n```\nCheck out an example [Makefile](https://github.com/cainus/urlgrey/blob/master/Makefile) from one of my projects for an example, especially the test-coveralls build target.  Note: Travis runs `npm test`, so whatever target you create in your Makefile must be the target that `npm test` runs (This is set in package.json's 'scripts' property).\n\n### [Istanbul](https://github.com/gotwarlost/istanbul)\n\n**With Mocha:**\n\n```sh\nistanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\n```\n\n**With Jasmine:**\n\n```sh\nistanbul cover jasmine-node --captureExceptions spec/ && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\n```\n\n### [Nodeunit](https://github.com/caolan/nodeunit) + [JSCoverage](https://github.com/fishbar/jscoverage)\n\nDepend on nodeunit, jscoverage and coveralls:\n\n```sh\nnpm install nodeunit jscoverage coveralls --save-dev\n```\n\nAdd a coveralls script to \"scripts\" in your `package.json`:\n\n```javascript\n\"scripts\": {\n  \"test\": \"nodeunit test\",\n  \"coveralls\": \"jscoverage lib && YOURPACKAGE_COVERAGE=1 nodeunit --reporter=lcov test | coveralls\"\n}\n```\n\nEnsure your app requires instrumented code when `process.env.YOURPACKAGE_COVERAGE` variable is defined.\n\nRun your tests with a command like this:\n\n```sh\nnpm run coveralls\n```\n\nFor detailed instructions on requiring instrumented code, running on Travis and submitting to coveralls [see this guide](https://github.com/alanshaw/nodeunit-lcov-coveralls-example).\n\n### [Poncho](https://github.com/deepsweet/poncho)\nClient-side JS code coverage using [PhantomJS](https://github.com/ariya/phantomjs), [Mocha](http://mochajs.org/) and [Blanket](https://github.com/alex-seville/blanket):\n- [Configure](http://mochajs.org/#running-mocha-in-the-browser) Mocha for browser\n- [Mark](https://github.com/deepsweet/poncho#usage) target script(s) with `data-cover` html-attribute\n- Run your tests with a command like this:\n\n```sh\n./node_modules/.bin/poncho -R lcov test/test.html | ./node_modules/coveralls/bin/coveralls.js\n```\n\n### [Lab](https://github.com/hapijs/lab)\n```sh\nlab -r lcov | ./node_modules/.bin/coveralls\n```\n\n### [nyc](https://github.com/bcoe/nyc)\n\nworks with almost any testing framework. Simply execute\n`npm test` with the `nyc` bin followed by running its reporter:\n\n```\nnyc npm test && nyc report --reporter=text-lcov | coveralls\n```\n\n### [TAP](https://github.com/isaacs/node-tap)\n\nSimply run your tap tests with the `COVERALLS_REPO_TOKEN` environment\nvariable set and tap will automatically use `nyc` to report\ncoverage to coveralls.\n\n### Command Line Parameters\nUsage: coveralls.js [-v] filepath\n\n#### Optional arguments:\n\n-v, --verbose\n\nfilepath - optionally defines the base filepath of your source files.\n\n## Running locally\n\nIf you're running locally, you must have a `.coveralls.yml` file, as documented in [their documentation](https://coveralls.io/docs/ruby), with your `repo_token` in it; or, you must provide a `COVERALLS_REPO_TOKEN` environment-variable on the command-line.\n\nIf you want to send commit data to coveralls, you can set the `COVERALLS_GIT_COMMIT` environment-variable to the commit hash you wish to reference. If you don't want to use a hash, you can set it to `HEAD` to supply coveralls with the latest commit data. This requires git to be installed and executable on the current PATH.\n\n[travis-image]: https://travis-ci.org/nickmerwin/node-coveralls.svg?branch=master\n[travis-url]: https://travis-ci.org/nickmerwin/node-coveralls\n\n[coveralls-image]: https://coveralls.io/repos/nickmerwin/node-coveralls/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/nickmerwin/node-coveralls?branch=master\n\n## Contributing\n\nI generally don't accept pull requests that are untested, or break the build, because I'd like to keep the quality high (this is a coverage tool afterall!).\n\nI also don't care for \"soft-versioning\" or \"optimistic versioning\" (dependencies that have ^, x, > in them, or anything other than numbers and dots).  There have been too many problems with bad semantic versioning in dependencies, and I'd rather have a solid library than a bleeding edge one.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nickmerwin/node-coveralls.git"
  },
  "scripts": {
    "test": "snyk test && make test"
  },
  "version": "3.0.1"
}
